let width  = 700;
let height = 700;

let qt;

let applyGravity = false;
let numOfParticles = 1000;
let G    = 0.2;
let maxV = 2;
let minM = 0.03;
let maxM = 0.07;
let maxR;

let particles = [];
let paused = false;

function setup() {
  createCanvas(width, height);
  strokeWeight(1);
  colorMode(HSB);
  createParticles();
  maxR = 20 * sqrt(maxM);
}

function draw() {
  if(!paused) {
    background(0);

    createQuadTree();
    checkCollisions();
    
    for(let p of particles) {
      p.update();
      p.checkEdges();
      p.show();
    }
    
    // let ke = getKE();
    // let p  = getMomentum();
    // console.log("KE: " + ke + "\tMomentum: " + p);
    // console.log(frameRate());
  }
}

function mousePressed() {
  if(
    mouseButton === LEFT &&
    mouseX >= 0 &&
    mouseY >= 0 &&
    mouseX <= width &&
    mouseY <= height
  ) {
    paused = !paused;
  }
}

function createParticles() {
  for(let i=0; i<numOfParticles; i++) {
    particles.push(new Particle(
      x  = random(width),
      y  = random(height),
      vx = random(-maxV, maxV),
      vy = random(-maxV, maxV),
      m  = random(minM, maxM)
    ));
  }
}

function createQuadTree() {
  let boundary = new Rectangle(width/2, height/2, width/2, height/2);
  qt = new QuadTree(boundary, 4);
  for(let p of particles) {
    qt.insert(p);
  }
}

function checkCollisions() {
  for(let p of particles) {
    let range = new Rectangle(p.pos.x, p.pos.y, 2*maxR, 2*maxR);
    let colliders = qt.query(range);
    for(let pt of colliders) {
      if(pt.particle && pt.particle !== p) {
        p.checkCollision(pt.particle);
      }
    }
  }
}

class Point {
  constructor(x, y) {
    this.x = x;
    this.y = y;
  }
}

class Rectangle {
  
  constructor(x, y, w, h) {
    // x, y are coords of center
    // w, h are half width and height
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
  }
  
  contains(pt) {
    return (
      pt.x >= this.x - this.w &&
      pt.y >= this.y - this.h &&
      pt.x <= this.x + this.w &&
      pt.y <= this.y + this.h
    );
  }
  
  intersects(other) {
    return (
      this.x - this.w < other.x + other.w ||
      this.y - this.h < other.y + other.h ||
      this.x + this.w > other.x - other.w ||
      this.y + this.h > other.y - other.h
    );
  }
}

class QuadTree {
  
  constructor(bd, cp) {
    this.bd = bd;
    this.cp = cp;
    this.points  = [];
    this.divided = false;
  }
  
  insert(particle) {
    let pt = new Point(particle.pos.x, particle.pos.y);
    pt.particle = particle;

    if(!this.bd.contains(pt)) {
      return false;
    }

    if(this.points.length < this.cp) {
      this.points.push(pt);
      return true;
    } else {
      if (!this.divided) {
        this.subdivide();
      }
      return (
        this.ne.insert(particle) ||
        this.nw.insert(particle) ||
        this.sw.insert(particle) ||
        this.se.insert(particle)
      );
    }
  }
  
  subdivide() {
    let x = this.bd.x;
    let y = this.bd.y;
    let w = this.bd.w / 2;
    let h = this.bd.h / 2;
    
    let ne = new Rectangle(x + w, y - h, w, h);
    let nw = new Rectangle(x - w, y - h, w, h);
    let sw = new Rectangle(x - w, y + h, w, h);
    let se = new Rectangle(x + w, y + h, w, h);
    
    this.ne = new QuadTree(ne, this.cp);
    this.nw = new QuadTree(nw, this.cp);
    this.sw = new QuadTree(sw, this.cp);
    this.se = new QuadTree(se, this.cp);
    
    this.divided = true;
  }
  
  show() {
    stroke(255);
    
    // draw rects
    strokeWeight(1);
    rect(
      this.bd.x - this.bd.w,
      this.bd.y - this.bd.h,
      2 * this.bd.w,
      2 * this.bd.h
    );
    
    // draw children rects
    if(this.divided) {
      this.ne.show();
      this.nw.show();
      this.sw.show();
      this.se.show();
    }
    
    // draw points
    strokeWeight(3);
    for(let pt of this.points) {
      point(pt.x, pt.y)
    }
  }
  
  query(range) {
    if(!this.bd.intersects(range)) {
      return [];
    }
    let found = [];
    for(let pt of this.points) {
      if(range.contains(pt)) {
        found.push(pt);
      }
    }
    if(this.divided) {
      found = found.concat(this.ne.query(range));
      found = found.concat(this.nw.query(range));
      found = found.concat(this.sw.query(range));
      found = found.concat(this.se.query(range));
    }
    return found;
  }
}

class Particle {
  
  constructor(x, y, vx, vy, m) {
    this.pos = createVector(x, y);
    this.vel = createVector(vx, vy);
    this.acc = createVector();
    this.m = m;
    this.r = 20 * sqrt(this.m);
    this.col = color(random(0, 255), 100, 80);
  }
  
  update() {
    if(applyGravity) this.acc.y += G;
    this.vel.add(this.acc);
    this.pos.add(this.vel);
    this.acc.mult(0);
  }
  
  show() {
    stroke(this.col);
    fill(this.col);
    circle(this.pos.x, this.pos.y, 2 * this.r);
  }
  
  checkEdges() {
    if(this.pos.x > width - this.r) {
      this.pos.x = width - this.r;
      this.vel.x *= -1;
    } else if(this.pos.x < this.r) {
      this.pos.x = this.r;
      this.vel.x *= -1;
    }
    
    if(this.pos.y > height - this.r) {
      this.pos.y = height - this.r;
      this.vel.y *= -1;
    } else if(this.pos.y < this.r) {
      this.pos.y = this.r;
      this.vel.y *= -1;
    }
  }
  
  applyForce(force) {
    force.div(this.m);
    this.acc.add(force);
  }
  
  checkCollision(other) {
    let d = this.pos.dist(other.pos);
    if(d === 0 || d > this.r + other.r) return;

    let mSum = this.m + other.m;
    let posDiff = p5.Vector.sub(other.pos, this.pos);
    let vDiff   = p5.Vector.sub(other.vel, this.vel);
    let dotProduct = vDiff.dot(posDiff);

    if (dotProduct > 0) return;

    let scale1 = (2 * other.m * dotProduct) / (mSum * d * d);
    let scale2 = (2 * this.m  * dotProduct) / (mSum * d * d);

    let deltaV1 = posDiff.copy().mult(scale1);
    let deltaV2 = posDiff.copy().mult(-scale2);

    this.vel.add(deltaV1);
    other.vel.add(deltaV2);
  }
}

function getKE() {
  let ke = 0;
  for(let p of particles) {
    ke += 0.5 * p.m * p.vel.mag() * p.vel.mag();
  }
  return ke;
}

function getMomentum() {
  let momentum = 0;
  for(let p of particles) {
    momentum += p.m * p.vel.mag();
  }
  return momentum;
}
