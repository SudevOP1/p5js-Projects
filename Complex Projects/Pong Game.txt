let width  = 800;
let height = 500;

let p1Score = 0;
let p2Score = 0;
let paddleWidth   = width / 80;
let paddleHeight  = height / 5;
let paddleSpeed   = 6;
let ballSpeed     = 0;
let balllMaxSpeed = 20;
let ballRadius    = 12;
let ballRestTime  = 1000;

let myColors = {
    paddle   : "#ee322c",
    ball     : "#87CEFA",
    bg       : "#002633",
    bgDetail : "#004a63",
}

let paddles = [];
let ball;
let paused = false;
let gameOver;
let gameOverTime;

function setup() {
  createCanvas(width, height);
  textAlign(CENTER, CENTER);
  textStyle(BOLD);
  
  newGame();
}

function draw() {
  if(!paused) {
    gameOver = ball.checkGameOver();
    
    if(!gameOver) {
      drawBg();

      paddles[0].show();
      paddles[1].show();

      movePaddles();
      ball.update();
      ball.show();
    }
    else {
      newGame();
    }
  }
}

function newGame() {
  
  // show
  setupPaddles();
  setupNewBall();
  drawBg();
  paddles[0].show();
  paddles[1].show();
  
  // pause for ballRestTime millisecs
  paused = true;
  setTimeout(
    () => paused = false,
    ballRestTime
  );
}

function drawBg() {
  // bg color
  background(myColors.bg);
  
  // show midline
  stroke(myColors.bgDetail);
  strokeWeight(paddleWidth)
  line(width*0.5, 0, width*0.5, height);
  
  // show score
  noStroke();
  textSize(100);
  fill(myColors.bgDetail);
  text(p1Score, width*0.25, height*0.5);
  text(p2Score, width*0.75, height*0.5);
}

function setupPaddles() {
  
  paddles[0] = new Paddle(
    2, (height - paddleHeight) * 0.5,
    paddleWidth, paddleHeight
  );
  
  paddles[1] = new Paddle(
    width - paddleWidth - 2, (height - paddleHeight) * 0.5,
    paddleWidth, paddleHeight
  );
}

function movePaddles() {
  if (keyIsDown(87)) {   // "w"
    paddles[0].move("up");
  } if (keyIsDown(83)) { // "s"
    paddles[0].move("down");
  }
  if (keyIsDown(38)) {   // "up arrow"
    paddles[1].move("up");
  } if (keyIsDown(40)) { // "down arrow"
    paddles[1].move("down");
  }
}

function setupNewBall() {
  let v = random(4, 5);
  let a = random(PI/6, PI/4);
  let xDir = floor(random([-1, 1]))
  let yDir = floor(random([-1, 1]))
  
  ball = new Ball(
    x  = width /2,
    y  = height/2,
    vx = xDir * v * cos(a),
    vy = yDir * v * sin(a),
  );
}

function mousePressed() {
  if(
    mouseButton === LEFT &&
    mouseX >= 0 &&
    mouseY >= 0 &&
    mouseX <= width &&
    mouseY <= height
  ) {
    paused = !paused;
  }
}

class Paddle {
  
  constructor(x, y, w, h) {
    this.pos = createVector(x, y);
    this.w = w;
    this.h = h;
  }
  
  move(dir) {
    // move the paddle
    if(dir === "up") {
      this.pos.y -= paddleSpeed;
    } else {
      this.pos.y += paddleSpeed;
    }
    
    // check edges
    if(this.pos.y < 0) {
      this.pos.y = 0;
    }
    if(this.pos.y > height - this.h) {
      this.pos.y = height - this.h ;
    }
  }
  
  show() {
    noStroke();
    fill(myColors.paddle);
    rect(this.pos.x, this.pos.y, this.w, this.h, 1000);
    
    // hitbox
    // noFill();
    // stroke(255);
    // strokeWeight(0.1);
    // rect(this.pos.x, this.pos.y, this.w, this.h);
  }
}

class Ball {
  
  constructor(x, y, vx=0, vy=0) {
    this.pos = createVector(x, y);
    this.vel = createVector(vx, vy);
    this.r = ballRadius;
    this.lastRespawnTime = millis();
  }
  
  update() {
    if(millis() - this.lastRespawnTime > ballRestTime) {
      this.pos.add(this.vel);
      this.vel.limit(balllMaxSpeed);
      this.checkEdgeCollisions();
      this.checkPaddleCollisions();
    }
  }
  
  checkEdgeCollisions() {
    if(this.pos.y < this.r) {
      this.pos.y = this.r;
      this.vel.y *= -1;
    }
    if(this.pos.y > height - this.r) {
      this.pos.y = height - this.r;
      this.vel.y *= -1;
    }
  }
  
  checkPaddleCollisions() {
    
    // left paddle
    if (
      this.pos.x - this.r <= paddles[0].pos.x + paddles[0].w &&
      this.pos.x + this.r >= paddles[0].pos.x &&
      this.pos.y + this.r >= paddles[0].pos.y &&
      this.pos.y - this.r <= paddles[0].pos.y + paddles[0].h
    ) {
      this.pos.x = paddles[0].pos.x + paddles[0].w + this.r;
      this.vel.x *= -1;
      this.vel.mult(1.05); // increase speed by 5%
    }

    // right paddle
    if (
      this.pos.x - this.r <= paddles[1].pos.x + paddles[1].w &&
      this.pos.x + this.r >= paddles[1].pos.x &&
      this.pos.y + this.r >= paddles[1].pos.y &&
      this.pos.y - this.r <= paddles[1].pos.y + paddles[1].h
    ) {
      this.pos.x = paddles[1].pos.x - this.r;
      this.vel.x *= -1;
      this.vel.mult(1.05); // increase speed by 5%
    }
  }
  
  checkGameOver() {
    if(this.pos.x + this.r <= 0) {
      p2Score++;
      return true;
    }
    if(this.pos.x - this.r >= width) {
      p1Score++;
      return true;
    }
    return false;
  }
  
  show() {
    noStroke();
    fill(myColors.ball);
    circle(this.pos.x, this.pos.y, 2 * this.r);
  }
}
